import {useEffect, useState} from "react";

import _ from 'lodash';

import {portfolioProject} from "../types/portfolioProject";
import styles from '../styles/Portfolio.module.scss';
import Image from "next/image";
import clsx from "clsx";


const githubOwner = 'based-jace';

const portfolioProjectTypeFields = [
    "demo", "githubRepoName", "title", "description", "githubStars"
]
const projects: portfolioProject[] = [
    {
        githubRepoName: "craiyon-bot",
        title: "Craiyon Bot",
        // githubStars: 7,
        description: "A Discord bot that uses Craiyon's AI to generate images",
        preview: "/craiyon-bot.png",
        imageAlt: "9-panel image depicting `technicolor chicken scratch art` as generated by Craiyon Bot using the craiyon.ai API"
    },
    {
        githubRepoName: "fara-the-film-bot",
        title: "This Website",
        // githubStars: 0,
        description: "Check out the code on GitHub",
        preview: "/me-coding.gif",
        imageAlt: "The same pixelated gif of me coding from the index page"
    },
    {
        githubRepoName: "fara-the-film-bot",
        title: "Fara the Film Bot",
        // githubStars: 2,
        description: "A Twitter bot that uses numerous APIs to recommend films, scrapes Wikipedia for data about them, then saves that data to a Google Sheet",
        preview: "/film-bot.png",
        imageAlt: "Stock image of a robot -- there are no images directly associated with this project"
    },
    {
        githubRepoName: "combining-flask-with-vue",
        title: "Combining Flask with Vue",
        // githubStars: 38,
        description: "3 Ways to Combine Flask with Vue - a repo for a post that I did for testdriven.io",
        preview: "/flask+vue.png",
        imageAlt: "SEO comparison of the app associated with this project running on vanilla Vue and Nuxt",
        blogPostUrl: "https://testdriven.io/blog/combine-flask-vue/"
    },
    {
        githubRepoName: "concurrency-parallelism-and-asyncio",
        title: "Concurrency, Parallelism, and Asyncio",
        // githubStars: 27,
        description: "Concurrent, Parallel, and Asynchronous Computing in Python (And Other Languages) - a repo for a post that I did for testdriven.io",
        preview: "/cpa-python.png",
        imageAlt: "Bar graph showing the benefits of parallel tasks using driving, listening to music, and eating a BLT as examples",
        blogPostUrl: "https://testdriven.io/blog/concurrency-parallelism-asyncio/"
    }
]

export default function Portfolio({_githubProjects = []}){
    const [githubProjects, setGithubProjects] = useState<portfolioProject[]>([]);
    const [selectedProject, setSelectedProject] = useState<portfolioProject | null>(null);

    function selectProject(project){
        setSelectedProject(project);
    }

    useEffect(()=>{
        setGithubProjects(_githubProjects);
        if(_githubProjects.length > 0) setSelectedProject(_githubProjects[0]);
        else setSelectedProject(null);
    }, [_githubProjects]);

    function createGithubRepoLink(project){
        return `https://github.com/${githubOwner}/${project.githubRepoName}`;
    }

    return (<main className={styles.main}>
        <h1>Portfolio</h1>
        <div className={styles.portfolioContainer}>
            <div className={styles.projectView}>
                {!_.isNil(selectedProject) ?
                    <>
                        <a href={createGithubRepoLink(selectedProject)} target="_blank" rel="noreferrer">
                            <div className={styles.imageContainer}>
                                <Image
                                    src={selectedProject.preview}
                                    height={300}
                                    width={400}
                                    layout="responsive"
                                    alt={selectedProject.imageAlt}
                                />
                            </div>
                        </a>
                        <h1>{selectedProject.title}</h1>
                        <p>{selectedProject.description}</p>
                        {
                            !_.isNil(selectedProject.githubStars) ?
                                <span>â˜…: {selectedProject.githubStars}</span> :
                                null
                        }
                        <a className={styles.githubLink} href={createGithubRepoLink(selectedProject)} target="_blank" rel="noreferrer">
                            View On Github
                        </a>
                        {
                            !_.isNil(selectedProject.blogPostUrl) ?
                                <a className={styles.blogPostLink} href={selectedProject.blogPostUrl} target="_blank" rel="noreferrer">
                                    Read Blog Post
                                </a>:
                                null
                        }
                    </>:
                    null
                }
            </div>
            <div className={styles.projectList}>
                <h1>Projects</h1>
                <ul>
                    {githubProjects.map((project, i)=>{
                        return <li key={"project-list-item" + i}>
                            <button
                                className={
                                    clsx({
                                        [styles.selected]: _.isEqual(selectedProject, project)
                                    })
                                }
                                onClick={()=>{selectProject(project)}}
                            >
                                <span className={styles.projectTitle}>{project.title}</span>
                                <span className={styles.projectStars}>{project.githubStars ? `${project.githubStars}` : ""}</span>
                            </button>
                        </li>
                    })}
                </ul>
            </div>
        </div>
    </main>)
}

export async function getServerSideProps(context){
    // const githubProjects: portfolioProject[] = [];
    //
    // async function fetchGithubProject(repoName: string): Promise<portfolioProject>{
    //     const g = await fetch(`https://api.github.com/repos/${githubOwner}/${repoName}`, {
    //         headers: {
    //             accept: "application/vnd.github+json"
    //         }
    //     });
    //     if(g.ok){
    //         const gJson = await g.json();
    //         return {
    //             title: gJson.name,
    //             description: gJson.description,
    //             githubRepoName: gJson.name,
    //             githubStars: gJson.stargazers_count
    //         };
    //     }
    //     else{
    //         console.error(g.statusText);
    //     }
    // }
    //
    // async function formatGithubProjects(){
    //     for(const project of projects){
    //         const githubProject = {};
    //         const githubResponse = await fetchGithubProject(project.githubRepoName);
    //         for(const key of portfolioProjectTypeFields){
    //             const value = project[key];
    //             switch (key){
    //                 case "demo":
    //                     break;
    //                 default:
    //                     if(!_.isNil(value)){
    //                         githubProject[key] = value;
    //                     }
    //                     else{
    //                         githubProject[key] = githubResponse[key];
    //                     }
    //                     break;
    //             }
    //         }
    //         githubProjects.push(githubProject as portfolioProject);
    //     }
    // }
    //
    // // await formatGithubProjects();  // TODO: Make use fewer GH calls

    return {
        props: {
            // _githubProjects: githubProjects
            _githubProjects: projects
        }
    }
}
